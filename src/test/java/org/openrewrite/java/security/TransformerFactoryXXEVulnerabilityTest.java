package org.openrewrite.java.security;

import org.junit.jupiter.api.Test;
import org.openrewrite.test.RecipeSpec;
import org.openrewrite.test.RewriteTest;

import static org.openrewrite.java.Assertions.java;

public class TransformerFactoryXXEVulnerabilityTest implements RewriteTest {
    @Override
    public void defaults(RecipeSpec spec) {
        spec.recipe(new XmlParserXXEVulnerability());
    }

    @Test
    void factoryIsNotVulnerable() {
        //language=java
        rewriteRun(
          java(
            """
              import javax.xml.transform.TransformerFactory;
              import javax.xml.transform.Source;
              import javax.xml.XMLConstants;
              public class MyTransformerFactory {
                  public void XMLTransformer(Source source) {
                      TransformerFactory tf = TransformerFactory.newInstance();
                      tf.setAttribute(XMLConstants.ACCESS_EXTERNAL_DTD, "");
                      tf.setAttribute(XMLConstants.ACCESS_EXTERNAL_STYLESHEET, "");
                      Transformer transformer = tf.newTransformer(source);
                  }
              }
              """
          )
        );
    }

    @Test
    void factoryIsVulnerable() {
        //language=java
        rewriteRun(
          java(
            """
              import javax.xml.transform.TransformerFactory;
              import javax.xml.transform.Source;
              public class MyTransformerFactory {
                  public void XMLTransformer(Source source) {
                      TransformerFactory tf = TransformerFactory.newInstance();
                      Transformer transformer = tf.newTransformer(source);
                  }
              }
              """,
            """
              import javax.xml.transform.TransformerFactory;
              import javax.xml.transform.Source;
              import javax.xml.XMLConstants;
              public class MyTransformerFactory {
                  public void XMLTransformer(Source source) {
                      TransformerFactory tf = TransformerFactory.newInstance();
                      tf.setAttribute(XMLConstants.ACCESS_EXTERNAL_DTD, "");
                      tf.setAttribute(XMLConstants.ACCESS_EXTERNAL_STYLESHEET, "");
                      Transformer transformer = tf.newTransformer(source);
                  }
              }
              """
          )
        );
    }
}
